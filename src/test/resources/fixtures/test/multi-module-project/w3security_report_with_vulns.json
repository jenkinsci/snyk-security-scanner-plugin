[
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "jenkins-junit-org",
    "policy": "# W3Security (https://w3security.tech) policy file, patches or ignores known vulnerabilities.\nversion: v1.14.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {}
    },
    "packageManager": "gradle",
    "ignoreSettings": null,
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "path": "/home/jenkins/projects/multi-module-project"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:56Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n\n[commons-collections:commons-collections](https://mvnrepository.com/artifact/commons-collections/commons-collections) is a library which contains types that extend and augment the Java Collections Framework.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nIt is possible to execute arbitrary Java code with the `InvokerTransformer` serializable collections . The `sun.reflect.annotation.AnnotationInvocationHandler#readObject` method invokes `#entrySet` and `#get` on a deserialized collection. If an attacker has to ability to send serialized data (JMX, RMI, EJB) to an application using the `common-collections` library, it is possible to combine the aforementioned methods to execute arbitrary code on the application.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://w3security.tech/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `commons-collections:commons-collections` to version 3.2.2 or higher.\n\n\n## References\n\n- [FoxGloveSecurity Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n\n- [GitHub Commit](https://github.com/apache/commons-collections/commit/e585cd0433ae4cfbc56e58572b9869bd0c86b611)\n\n- [Jira Issue](https://issues.apache.org/jira/browse/COLLECTIONS-580)\n",
        "disclosureTime": "2015-11-06T16:51:56Z",
        "exploit": "Functional",
        "fixedIn": [
          "3.2.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": "InvokerTransformer",
              "filePath": "org/apache/commons/collections/functors/InvokerTransformer.java",
              "functionName": "transform"
            },
            "version": [
              "[3,3.2.2)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.commons.collections.functors.InvokerTransformer",
              "functionName": "transform"
            },
            "version": [
              "[3,3.2.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
        "identifiers": {
          "CVE": [
            "CVE-2015-4852",
            "CVE-2015-7501"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-collections",
          "groupId": "commons-collections"
        },
        "modificationTime": "2019-09-06T13:34:59.829115Z",
        "moduleName": "commons-collections:commons-collections",
        "packageManager": "maven",
        "packageName": "commons-collections:commons-collections",
        "patches": [],
        "publicationTime": "2015-11-06T16:51:56Z",
        "references": [
          {
            "title": "FoxGloveSecurity Blog",
            "url": "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-collections/commit/e585cd0433ae4cfbc56e58572b9869bd0c86b611"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/COLLECTIONS-580"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0,3.2.2)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "123456789/gmg-api@0.0.0",
          "commons-collections:commons-collections@3.1"
        ],
        "upgradePath": [
          false,
          "commons-collections:commons-collections@3.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-collections:commons-collections",
        "version": "3.1"
      }
    ],
    "ok": false,
    "dependencyCount": 2,
    "org": "jenkins-junit-org",
    "policy": "# W3Security (https://w3security.tech) policy file, patches or ignores known vulnerabilities.\nversion: v1.14.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {
      },
      "orgLicenseRules": {
      }
    },
    "packageManager": "gradle",
    "ignoreSettings": null,
    "summary": "1 vulnerable dependency path",
    "remediation": {
      "unresolved": [],
      "upgrade": {
        "commons-collections:commons-collections@3.1": {
          "upgradeTo": "commons-collections:commons-collections@3.2.2",
          "upgrades": [
            "commons-collections:commons-collections@3.1"
          ],
          "vulns": [
            "SNYK-JAVA-COMMONSCOLLECTIONS-30078"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "path": "/home/jenkins/projects/multi-module-project"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 2,
    "org": "jenkins-junit-org",
    "policy": "# W3Security (https://w3security.tech) policy file, patches or ignores known vulnerabilities.\nversion: v1.14.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {
      },
      "orgLicenseRules": {
      }
    },
    "packageManager": "gradle",
    "ignoreSettings": null,
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "path": "/opt/buildagent/work/"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 2,
    "org": "jenkins-junit-org",
    "policy": "# W3Security (https://w3security.tech) policy file, patches or ignores known vulnerabilities.\nversion: v1.14.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {
      },
      "orgLicenseRules": {
      }
    },
    "packageManager": "gradle",
    "ignoreSettings": null,
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "path": "/home/jenkins/projects/multi-module-project"
  }
]
